---
title: "Asignación de clima a ciclos de cultivo"
author: Centro Internacional de Agricultura Trópical grupo de Big-Data AEPS <br/>
  Hugo Dorado
date: "April 26, 2018"
output:
  html_document: default
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Introducción

La asignación de variables climáticas a ciclos de cultivo utilizando estaciones meteorológicas, se realiza por medio de un proceso que consiste inicialmente en definir la coincidencia entre sitios de cultivo y ubicación de la estaciones, dicha coincidencia se define por medio de diferencias entre altura y proximidad espacial, las cuales se evalúan por medio de restricciones que pueden variar por variable (por ejemplo la distancia aplicada para temperatura puede ser menos rigurosa que la distancia en precipitación). Un paso posterior a evaluar las coincidencias es el de calcular indicadores climáticos por cada una de las variables de interés dentro del ciclo, para lo cual se utilizan promedios, desviaciones estándar, acumulados y frecuencias.

El script `Distances_Process.R`, permite realizar el procesamiento de estaciones meteorológicas en escala diaria y ciclos de cultivo, con el propósito de vincularlos y generar indicadores climáticos que puedan ser de utilidad en el futuro para asociar información de suelo, manejo agronómico y rendimiento. Para que el proceso pueda ser ejecutado efectivamente se debe realizar una buena preparación  de los datos utilizados, especialmente los de las estaciones meteorológicas.

El documento se divide en una parte de preparación de datos donde se detalla la estructura de los archivos iniciales y los filtros de información relevante, seguido de la vinculación de ciclos de cultivo a estaciones meteorológicas que permite aplicar las restricciones de distancia y altura, luego una sesión para identificar por variable la estación más próxima a cada ciclo de cultivo, posteriormente se generan indicadores climáticos, y finalmente se almacenan los datos procesados. El propósito es que en el futuro, otros investigadores, técnicos, académicos entre otros puedan replicar estos pasos para analizar el efecto del clima en sitios cercanos a estaciones meteorológicas.

## Preparación de datos

Los paquetes necesarios, son `here` para leer y escribir archivos con la ubicación asignada para el proyecto, `data.table`, que es un paquete que  permite manipular bases de datos de manera más eficiente, `plyr` que es un paquete de procesamiento y resumen de bases de datos, `Imap` que es una herramienta de mapeo interactivo y en este caso se usa para calcular las distancias entre puntos georeferenciados y `pgrimess` que es un paquete de análisis espacial y minería de datos

```{r message=FALSE, warning=FALSE}
rm(list = ls())

library(here)
library(data.table)
library(plyr)
library(Imap)
library(pgirmess)
```

### Archivos iniciales

El primer archivo que debemos cargar por medio de la función `source` es `Merge_Station_Funs.R`, dado muchas de las funciones que utilizamos posteriormente están programadas allí, lo ideal es que esté de la carpeta `SCRIPTS`

```{r message=FALSE, warning=FALSE}
source(here::here('SCRIPTS','Merge_Stations_Funs.R'))
```

El siguiente archivo a cargar es el catálogo de estaciones climáticas, el cual debe contener a su vez una base de datos de ciclos de cultivo con la altura incluida, `Catalogs.RData` es un archivo que se genera en el proceso descrito en [Generación de catálogo de clima]( https://github.com/hdorado/aeps_Vinculacion_clima_ciclos_cosecha/blob/master/SCRIPTS/Stations_Catalog.R), que está dentro de esta misma carpeta. 

```{r message=FALSE, warning=FALSE}
load(here::here('RESULTS','Catalogs.RData'))
head(Stations_catalog)
head(crop_cycles)
```

`list_Station_Unprocess.RData` y `list_Stations_Process.RData` son archivos que provienen del proceso de [limpieza y control de procesamiento de datos](https://github.com/j-river1/Weather_Data_Code), `list_Station_Unprocess.RData` es una que lista contiene en cada componente un `data.frame` con fecha y medición de cada variable por separado, dicha medición está en un formato sin procesar, es decir puede contiener NA's. El nombre de cada componente de la lista está compuesto por el identificador de la estación meterológica y separado por raya piso (`_`) el nombre de la variable, (`P`,`RH`,`SR`,`TM`,`TX`).

```{r message=FALSE, warning=FALSE}
load(here::here('BASIC_FILES','list_Station_Unprocess.RData'))
lapply(list_Stations_Unprocess[1:3],head)
```

Por otro lado `list_Stations_Process.RData`, tiene los archivos ya procesados de las estaciones meteorológicas, siendo en este caso, listas que contienen `data.frames` con columnas de información limpias, y las variables trabajadas ya consolidadas en una tabla. El nombre corresponde con el identificador de la estación meteorológica.

```{r message=FALSE, warning=FALSE}
load(here::here('BASIC_FILES','list_Stations_Process.RData'))
lapply(list_Stations_Process[1:3],head)
```

### Filtrar por información útil de acuerdo a los periodos de interés y disponibilidad de datos

Descartar estaciones cuya información esté por fuera de las fechas de los ciclos de cultivo


```{r}
# Filter stations per availability

earlist_date_crop_cycle <- min(crop_cycles$Ini_Date)
lastest_data_crop_cycle <- max(crop_cycles$End_Date) 


rule1 <- earlist_date_crop_cycle > Stations_catalog$Max_Date
rule2 <- lastest_data_crop_cycle < Stations_catalog$Min_Date

Stations_target <- Stations_catalog[!(rule1|rule2),]
```

Descartar ciclos de cultivo cuya información esté por fuera de las fechas de las estaciones

```{r}
# Filter station per cropping cycles

crop_cycles <- crop_cycles[min(Stations_target$Min_Date) < crop_cycles$Ini_Date,]
```

## Vinculación de ciclos de cultivo a estaciones meteorológicas

La función `merge_Stations` permite coincidir ciclos de cultivo y estaciones meteorológicas de acuerdo a restricciones de distancia conservando unicamente las relaciones que cumplan los criterios mínimos, en este caso por defecto tenemos que para temperatura se admite una distancia máxima de 30.000 metros, 15.000 metros para precipitación y 150 metros de diferencia en elevación. 

```{r}
# Merge the station and cropping cycles according distances rules that are specified in the function,
# the time period between station - cropping cycles is validated as well, station and crop_cycles which
# don't

merg_Station <- merge_Stations(Stations_target,crop_cycles,crop_cycle_Name= 'FID',
              Dtemp  = 30000, Drain  = 15000,
              Drhum  = 30000, Drads  = 30000,
              DifElv = 150)

lapply(merg_Station,head)
```

Existe la posibilidad que posterior al paso anterior, aún algunos eventos de cultivo no puedan ser cubiertos por las estaciones que están disponibles para la información climática, esto debido a que no cumplen los criterios establecidos, es decir están muy lejos o tienen una diferencia de altura muy grande, por tal razón estos eventos de cultivo son removidos de la base de datos de `crop_cycles`.

```{r}
# Extract the usefullStation list

usefullStation <- merg_Station$usefullStation

# Selecting only fileds which have avaliable stations

crop_cycles <- crop_cycles[crop_cycles$FID %in% usefullStation$ID_crop_cycle,]
```

## Identificar por variable, la estación que mejor represente la información climática.  

La función `crop_cycle_vars_station_assignation`, está diseñada para definir cuál es la estación que mejor representa a cada variable que va a ser asignada a un ciclo de cultivo, para ello elegirá la estación con menor distancia, menor diferencia de altura y menor cantidad de datos perdidos en dicho periodo.

```{r}
# Assigning each variable for each station

crop_cycle_vars_station_assignation <- assing_var_station(crop_cycles,usefullStation)

head(crop_cycle_vars_station_assignation)
```

La figura a continuación muestra la distribución de estaciones (triángulos) y ciclos de cultivo (círculos), de acuerdo a la asignación obtenida en temperatura máxima representada por el mismo color.

```{r , echo=FALSE, message=FALSE, warning=FALSE}
require(rgdal)

shapeChiapas <- readOGR('//dapadfs/workspace_cluster_8/AEPS/CIMMYT_2016/GIS/Chiapas_mascara.shp',verbose = FALSE)

crop_cycles_toPlot     <- crop_cycles
Stations_target_toPlot <- Stations_target
set.seed(1239)
Stations_target_toPlot$color <- sample(colors(),length(Stations_target_toPlot$Station_Name),replace = F)

ccStat <- crop_cycle_vars_station_assignation[crop_cycle_vars_station_assignation$Variable=='TX',]

ccStat <- merge(ccStat,Stations_target_toPlot[c('Station_Name','color')],by.x='Station',by.y='Station_Name',all.x=T,all.y=F,sort=F)

crop_cycles_toPlot <- merge(crop_cycles_toPlot,ccStat,by.x='FID',by.y='crop_cycle',all.x=T,all.y=F)

layout(rbind(1:2))
par(mar=c(.1,.1,2,.1))
plot(shapeChiapas,main='Puntos vs estaciones (Tmax)')
points(crop_cycles_toPlot$Longitude,crop_cycles_toPlot$Latitude,pch=21,bg=crop_cycles_toPlot$color)  
points(Stations_target_toPlot$Longitude,Stations_target_toPlot$Latitude,pch=24,bg = Stations_target_toPlot$color)

par(mar=c(.1,.1,3,.1))
plot(shapeChiapas,main='Puntos vs estaciones (Tmax)\nChiapas sur',xlim=c(-92.961,-92.085),ylim=c(14.53,15.217))
points(crop_cycles_toPlot$Longitude,crop_cycles_toPlot$Latitude,pch=21,bg=crop_cycles_toPlot$color)  
points(Stations_target_toPlot$Longitude,Stations_target_toPlot$Latitude,pch=24,bg = Stations_target_toPlot$color)
```



Por último se aplica la función ` weather_assignation`, que permite traer los valores reales de las variables de las estaciones meteorológicas y agruparlas en un `data.frame` o matriz donde cada fila representa un día del ciclo. El objeto final es una lista que contiene la historia climática a nivel diario de cada ciclo de cultivo.



```{r}
# Assigning daily weather information for each event variable

Final_weather_assign <- weather_assignation(crop_cycle_vars_station_assignation,list_Stations_Process)

lapply(Final_weather_assign[1:3],head)

```

El resultado que se obtiene en este paso sirve como insumo para realizar [clustering de eventos de clima]( https://github.com/hdorado/CLUSTERING_PATRONES_CLIMA) e [indicadores climáticos](https://github.com/hdorado/Indicadores-climaticos), los cuales hacen parte de otros análisis o pasos previos de análisis de Agricultura Específica por Sitio (AEPS).

## Generar indicadores climáticos por cada uno de los ciclos de acuerdo a la asignación.

Después de obtener las listas procedemos a calcular indicadores climáticos que sirvan como variables en análisis posteriores, para ello utilizamos la función `weather_indicators`, no obstante para agregar más indicadores y ver con mayor profundidad como trabaja esta función se sugiere explorar el repositorio de [indicadores climáticos](https://github.com/hdorado/Indicadores-climaticos).

```{r}
# Generating weather indicators

Final_indicators <- weather_indicators(Final_weather_assign)
head(Final_indicators)
```

## Almacenar resultados 

Finalmente almancenamos los resultados del procesamiento, todos los archivos son relevantes para consultas posteriores o seguir procesos de análisis AEPS.

```{r}
# Files to save

save( Final_weather_assign , file=here::here("RESULTS","Final_weather_assign.RData"))

write.csv(crop_cycle_vars_station_assignation,here::here("RESULTS","crop_cycle_vars_station_assignation.csv"),row.names = F)

write.csv(Final_indicators,here::here("RESULTS","Final_indicators.csv"),row.names = F)

```

(C\) *2018, Grupo Big Data y  Agricultura Específica por Sitio, Centro Internacional de Agricultura Trópical*
